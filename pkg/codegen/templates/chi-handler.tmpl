// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
  return HandlerFromMux(si, chi.NewRouter())
}

type ChiServerOptions struct {
    BaseURL string
    BaseRouter chi.Router
    Middlewares []middlewareFunc
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
    router := options.BaseRouter

    if router == nil {
        router := chi.NewRouter()
    }
    {{if .}}wrapper := ServerInterfaceWrapper{
        Handler: si,
        HandlerMiddlewares: options.Middlewares,
    }
    {{end}}
    {{range .}}r.Group(func(r chi.Router) {
        r.{{.Method | lower | title }}(options.BaseURL+"{{.Path | swaggerUriToChiUri}}", wrapper.{{.OperationId}})
    })
    {{end}}
    return r
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
    return HandlerFromMuxWithBaseURL(si, r, "")
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
    return HandlerWithOptions(si, ChiServerOptions {
        BaseURL: baseURL,
        BaseRouter: r,
    })
}

